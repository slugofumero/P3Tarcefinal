<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <link rel='stylesheet' href='/stylesheets/stylechat.css' />
    <title>Chat en Vivo del Hotel</title>

</head>
<body>
    <h2>Chat en Vivo del Hotel</h2>
    <div id="chatArea"></div>
    <input type="text" id="messageInput" placeholder="Escribe tu mensaje aquí">
    <button id="sendButton">Enviar</button>
    <video id="pantallaCompartida" autoplay playsinline></video>
    <script>
let connections = {}; // Almacena múltiples conexiones
let socket = new WebSocket("ws://127.0.0.1:10000");
let localConnection = new RTCPeerConnection();



socket.onmessage = function(event) {
    // Comprueba si el mensaje es un Blob
    if (event.data instanceof Blob) {
        const reader = new FileReader();
        reader.onload = function() {
            try {
                const data = JSON.parse(reader.result);
                processMessage(data);
            } catch (e) {
                console.error("Error al analizar el mensaje Blob:", e);
            }
        };
        reader.readAsText(event.data);
    } else {
        // Si no es un Blob, maneja el mensaje como una cadena normal
        try {
            const data = JSON.parse(event.data);
            processMessage(data);
        } catch (e) {
            console.error("Error al analizar el mensaje:", e);
        }
    }
};

function processMessage(data) {
    let conn = connections[data.clientId];
    console.log("Mensaje recibido:", data);

    switch(data.type) {
        case "offer":
            handleOffer(data.offer, data.clientId);
            break;
        case "candidate":
            if (conn) {
                conn.addIceCandidate(new RTCIceCandidate(data.candidate));
            }
            break;
            case "message":
                const chatArea = document.getElementById('chatArea');
                const messageElement = document.createElement('p');
                messageElement.textContent = "Cliente: " + data.data; 
                chatArea.appendChild(messageElement);   
            break;
   
    }
}

function handleOffer(offer, clientId) {
    let conn = new RTCPeerConnection();
    connections[clientId] = conn;

    conn.onicecandidate = function(event) {
        if (event.candidate) {
            socket.send(JSON.stringify({ type: "candidate", candidate: event.candidate, clientId: clientId }));
        }
    };

    conn.ondatachannel = function(event) {
        let channel = event.channel;
        channel.onmessage = function(event) {
        };
    };

    conn.setRemoteDescription(new RTCSessionDescription(offer)).then(() => {
        return conn.createAnswer();
    }).then(answer => {
        conn.setLocalDescription(answer);
        return answer;
    }).then(answer => {
        socket.send(JSON.stringify({ type: "answer", answer: answer, clientId: clientId }));
    });
}


document.getElementById('sendButton').addEventListener('click', function() {
    const messageInput = document.getElementById('messageInput');
    const message = messageInput.value;

    if (message) {
        // Enviar el mensaje a través de WebSocket
        socket.send(JSON.stringify({ type: "message", data: message }));

        // Limpiar el campo de entrada después de enviar
        document.getElementById('messageInput').value = '';
        // Añadir el mensaje al área del chat
        const chatArea = document.getElementById('chatArea');
        const messageElement = document.createElement('p');
        messageElement.textContent = "Tú: " + message;
        chatArea.appendChild(messageElement);

        // Limpiar el campo de entrada después de enviar
        messageInput.value = '';
    }
});


localConnection.ontrack = function(event) {
    if (event.track.kind === "video") {
        document.getElementById('pantallaCompartida').srcObject = event.streams[0];
    }
};
    </script>
</body>
</html>
